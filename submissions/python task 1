#question1
import pandas as pd

def generate_car_matrix(df: pd.DataFrame) -> pd.DataFrame:
   
    car_matrix = df.pivot(index='id_1', columns='id_2', values='car').fillna(0)

    # Set diagonal values to 0
    car_matrix.values[[range(len(car_matrix))]*2] = 0

    return car_matrix

result_matrix = generate_car_matrix(df)
print(result_matrix)

#question2
import pandas as pd

def get_type_count(df: pd.DataFrame) -> dict:
    
    df['car_type'] = pd.cut(df['car'], bins=[float('-inf'), 15, 25, float('inf')],labels=['low', 'medium', 'high'], right=False)

    # Calculate the count of occurrences for each 'car_type' category
    type_counts = df['car_type'].value_counts().to_dict()

    # Sort the dictionary alphabetically based on keys
    sorted_type_counts = dict(sorted(type_counts.items()))

    return sorted_type_counts

type_counts = get_type_count(df)
print(type_counts)

#question3 
import pandas as pd

def get_bus_indexes(df: pd.DataFrame) -> list:
   
    mean_bus_value = df['bus'].mean()

    # Get indices where 'bus' values are greater than twice the mean
    bus_indexes = df[df['bus'] > 2 * mean_bus_value].index.tolist()

    # Sort the indices in ascending order
    bus_indexes.sort()

    return bus_indexes

bus_indices = get_bus_indexes(df)
print(bus_indices)

#question4
import pandas as pd

def filter_routes(df: pd.DataFrame) -> list:
    
    truck_routes = df.groupby('route')['truck'].mean()

    # Filter routes with average 'truck' values greater than 7
    filtered_routes = truck_routes[truck_routes > 7].index.tolist()

    # Sort the list of route names
    filtered_routes.sort()

    return filtered_routes


filtered_routes = filter_routes(df)
print(filtered_routes)

#question5
import pandas as pd

def multiply_matrix(matrix: pd.DataFrame) -> pd.DataFrame:
   
    # Apply custom conditions to multiply matrix values
    modified_matrix = matrix.applymap(lambda x: x * 0.75 if x > 20 else x * 1.25)

    # Round the values to 1 decimal place
    modified_matrix = modified_matrix.round(1)

    return modified_matrix

modified_result_matrix = multiply_matrix(result_matrix)
print(modified_result_matrix)

#question6
import pandas as pd

def time_check(df: pd.DataFrame) -> pd.Series:
    
    df['timestamp'] = pd.to_datetime(df['timestamp'])

    # Extract day of the week and hour of the day
    df['day_of_week'] = df['timestamp'].dt.dayofweek
    df['hour_of_day'] = df['timestamp'].dt.hour

    # Check if timestamps cover a full 24-hour period and span all 7 days of the week
    completeness_check = (
        (df.groupby(['id', 'id_2'])['hour_of_day'].nunique() == 24) &
        (df.groupby(['id', 'id_2'])['day_of_week'].nunique() == 7)
    )

    return completeness_check

completeness_series = time_check(df2)
print(completeness_series)







